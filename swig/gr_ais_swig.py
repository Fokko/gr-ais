# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gr_ais_swig', [dirname(__file__)])
        except ImportError:
            import _gr_ais_swig
            return _gr_ais_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_gr_ais_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gr_ais_swig = swig_import_helper()
    del swig_import_helper
else:
    import _gr_ais_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _gr_ais_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _gr_ais_swig.SwigPyIterator_value(self)

    def incr(self, n=1):
        """incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _gr_ais_swig.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _gr_ais_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _gr_ais_swig.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _gr_ais_swig.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _gr_ais_swig.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _gr_ais_swig.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _gr_ais_swig.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _gr_ais_swig.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gr_ais_swig.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _gr_ais_swig.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _gr_ais_swig.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gr_ais_swig.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gr_ais_swig.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _gr_ais_swig.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _gr_ais_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _gr_ais_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ais_invert_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ais_invert)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(ais_invert)> self) -> ais_invert_sptr
        __init__(boost::shared_ptr<(ais_invert)> self, ais_invert * p) -> ais_invert_sptr
        """
        this = _gr_ais_swig.new_ais_invert_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ais_invert_sptr self) -> ais_invert *"""
        return _gr_ais_swig.ais_invert_sptr___deref__(self)

    __swig_destroy__ = _gr_ais_swig.delete_ais_invert_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(ais_invert_sptr self) -> unsigned int"""
        return _gr_ais_swig.ais_invert_sptr_history(self)

    def output_multiple(self):
        """output_multiple(ais_invert_sptr self) -> int"""
        return _gr_ais_swig.ais_invert_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ais_invert_sptr self) -> double"""
        return _gr_ais_swig.ais_invert_sptr_relative_rate(self)

    def start(self):
        """start(ais_invert_sptr self) -> bool"""
        return _gr_ais_swig.ais_invert_sptr_start(self)

    def stop(self):
        """stop(ais_invert_sptr self) -> bool"""
        return _gr_ais_swig.ais_invert_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ais_invert_sptr self, unsigned int which_input) -> uint64_t"""
        return _gr_ais_swig.ais_invert_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ais_invert_sptr self, unsigned int which_output) -> uint64_t"""
        return _gr_ais_swig.ais_invert_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ais_invert_sptr self) -> int"""
        return _gr_ais_swig.ais_invert_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ais_invert_sptr self, int m)"""
        return _gr_ais_swig.ais_invert_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ais_invert_sptr self)"""
        return _gr_ais_swig.ais_invert_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ais_invert_sptr self) -> bool"""
        return _gr_ais_swig.ais_invert_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ais_invert_sptr self, int i) -> long"""
        return _gr_ais_swig.ais_invert_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ais_invert_sptr self, long max_output_buffer)
        set_max_output_buffer(ais_invert_sptr self, int port, long max_output_buffer)
        """
        return _gr_ais_swig.ais_invert_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ais_invert_sptr self, int i) -> long"""
        return _gr_ais_swig.ais_invert_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ais_invert_sptr self, long min_output_buffer)
        set_min_output_buffer(ais_invert_sptr self, int port, long min_output_buffer)
        """
        return _gr_ais_swig.ais_invert_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ais_invert_sptr self) -> float"""
        return _gr_ais_swig.ais_invert_sptr_pc_noutput_items(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ais_invert_sptr self) -> float"""
        return _gr_ais_swig.ais_invert_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ais_invert_sptr self) -> float"""
        return _gr_ais_swig.ais_invert_sptr_pc_nproduced(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ais_invert_sptr self) -> float"""
        return _gr_ais_swig.ais_invert_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ais_invert_sptr self, int which) -> float
        pc_input_buffers_full(ais_invert_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_invert_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ais_invert_sptr self, int which) -> float
        pc_input_buffers_full_var(ais_invert_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_invert_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ais_invert_sptr self, int which) -> float
        pc_output_buffers_full(ais_invert_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_invert_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ais_invert_sptr self, int which) -> float
        pc_output_buffers_full_var(ais_invert_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_invert_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ais_invert_sptr self) -> float"""
        return _gr_ais_swig.ais_invert_sptr_pc_work_time(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ais_invert_sptr self) -> float"""
        return _gr_ais_swig.ais_invert_sptr_pc_work_time_var(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ais_invert_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _gr_ais_swig.ais_invert_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ais_invert_sptr self)"""
        return _gr_ais_swig.ais_invert_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ais_invert_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _gr_ais_swig.ais_invert_sptr_processor_affinity(self)

    def detail(self):
        """detail(ais_invert_sptr self) -> gr_block_detail_sptr"""
        return _gr_ais_swig.ais_invert_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(ais_invert_sptr self, gr_block_detail_sptr detail)"""
        return _gr_ais_swig.ais_invert_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(ais_invert_sptr self) -> std::string"""
        return _gr_ais_swig.ais_invert_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ais_invert_sptr self) -> std::string"""
        return _gr_ais_swig.ais_invert_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ais_invert_sptr self) -> gr_io_signature_sptr"""
        return _gr_ais_swig.ais_invert_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ais_invert_sptr self) -> gr_io_signature_sptr"""
        return _gr_ais_swig.ais_invert_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ais_invert_sptr self) -> long"""
        return _gr_ais_swig.ais_invert_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ais_invert_sptr self) -> gr_basic_block_sptr"""
        return _gr_ais_swig.ais_invert_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ais_invert_sptr self, int ninputs, int noutputs) -> bool"""
        return _gr_ais_swig.ais_invert_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ais_invert_sptr self) -> std::string"""
        return _gr_ais_swig.ais_invert_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ais_invert_sptr self, std::string name)"""
        return _gr_ais_swig.ais_invert_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ais_invert_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _gr_ais_swig.ais_invert_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ais_invert_sptr self) -> swig_int_ptr"""
        return _gr_ais_swig.ais_invert_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ais_invert_sptr self) -> swig_int_ptr"""
        return _gr_ais_swig.ais_invert_sptr_message_ports_out(self)

ais_invert_sptr_swigregister = _gr_ais_swig.ais_invert_sptr_swigregister
ais_invert_sptr_swigregister(ais_invert_sptr)

ais_invert_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def invert():
  """
    invert() -> ais_invert_sptr

    invert a packed stream of bits.

    This uses the preferred technique: subclassing gr_sync_block.

    Return a shared_ptr to a new instance of ais_invert.

    To avoid accidental use of raw pointers, ais_invert's constructor is private. ais_make_invert is the public interface for creating new instances.

    Params: (NONE)
    """
  return _gr_ais_swig.invert()
class ais_unstuff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ais_unstuff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(ais_unstuff)> self) -> ais_unstuff_sptr
        __init__(boost::shared_ptr<(ais_unstuff)> self, ais_unstuff * p) -> ais_unstuff_sptr
        """
        this = _gr_ais_swig.new_ais_unstuff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ais_unstuff_sptr self) -> ais_unstuff *"""
        return _gr_ais_swig.ais_unstuff_sptr___deref__(self)

    __swig_destroy__ = _gr_ais_swig.delete_ais_unstuff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(ais_unstuff_sptr self) -> unsigned int"""
        return _gr_ais_swig.ais_unstuff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(ais_unstuff_sptr self) -> int"""
        return _gr_ais_swig.ais_unstuff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ais_unstuff_sptr self) -> double"""
        return _gr_ais_swig.ais_unstuff_sptr_relative_rate(self)

    def start(self):
        """start(ais_unstuff_sptr self) -> bool"""
        return _gr_ais_swig.ais_unstuff_sptr_start(self)

    def stop(self):
        """stop(ais_unstuff_sptr self) -> bool"""
        return _gr_ais_swig.ais_unstuff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ais_unstuff_sptr self, unsigned int which_input) -> uint64_t"""
        return _gr_ais_swig.ais_unstuff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ais_unstuff_sptr self, unsigned int which_output) -> uint64_t"""
        return _gr_ais_swig.ais_unstuff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ais_unstuff_sptr self) -> int"""
        return _gr_ais_swig.ais_unstuff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ais_unstuff_sptr self, int m)"""
        return _gr_ais_swig.ais_unstuff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ais_unstuff_sptr self)"""
        return _gr_ais_swig.ais_unstuff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ais_unstuff_sptr self) -> bool"""
        return _gr_ais_swig.ais_unstuff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ais_unstuff_sptr self, int i) -> long"""
        return _gr_ais_swig.ais_unstuff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ais_unstuff_sptr self, long max_output_buffer)
        set_max_output_buffer(ais_unstuff_sptr self, int port, long max_output_buffer)
        """
        return _gr_ais_swig.ais_unstuff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ais_unstuff_sptr self, int i) -> long"""
        return _gr_ais_swig.ais_unstuff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ais_unstuff_sptr self, long min_output_buffer)
        set_min_output_buffer(ais_unstuff_sptr self, int port, long min_output_buffer)
        """
        return _gr_ais_swig.ais_unstuff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ais_unstuff_sptr self) -> float"""
        return _gr_ais_swig.ais_unstuff_sptr_pc_noutput_items(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ais_unstuff_sptr self) -> float"""
        return _gr_ais_swig.ais_unstuff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ais_unstuff_sptr self) -> float"""
        return _gr_ais_swig.ais_unstuff_sptr_pc_nproduced(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ais_unstuff_sptr self) -> float"""
        return _gr_ais_swig.ais_unstuff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ais_unstuff_sptr self, int which) -> float
        pc_input_buffers_full(ais_unstuff_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_unstuff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ais_unstuff_sptr self, int which) -> float
        pc_input_buffers_full_var(ais_unstuff_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_unstuff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ais_unstuff_sptr self, int which) -> float
        pc_output_buffers_full(ais_unstuff_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_unstuff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ais_unstuff_sptr self, int which) -> float
        pc_output_buffers_full_var(ais_unstuff_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_unstuff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ais_unstuff_sptr self) -> float"""
        return _gr_ais_swig.ais_unstuff_sptr_pc_work_time(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ais_unstuff_sptr self) -> float"""
        return _gr_ais_swig.ais_unstuff_sptr_pc_work_time_var(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ais_unstuff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _gr_ais_swig.ais_unstuff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ais_unstuff_sptr self)"""
        return _gr_ais_swig.ais_unstuff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ais_unstuff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _gr_ais_swig.ais_unstuff_sptr_processor_affinity(self)

    def detail(self):
        """detail(ais_unstuff_sptr self) -> gr_block_detail_sptr"""
        return _gr_ais_swig.ais_unstuff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(ais_unstuff_sptr self, gr_block_detail_sptr detail)"""
        return _gr_ais_swig.ais_unstuff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(ais_unstuff_sptr self) -> std::string"""
        return _gr_ais_swig.ais_unstuff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ais_unstuff_sptr self) -> std::string"""
        return _gr_ais_swig.ais_unstuff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ais_unstuff_sptr self) -> gr_io_signature_sptr"""
        return _gr_ais_swig.ais_unstuff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ais_unstuff_sptr self) -> gr_io_signature_sptr"""
        return _gr_ais_swig.ais_unstuff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ais_unstuff_sptr self) -> long"""
        return _gr_ais_swig.ais_unstuff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ais_unstuff_sptr self) -> gr_basic_block_sptr"""
        return _gr_ais_swig.ais_unstuff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ais_unstuff_sptr self, int ninputs, int noutputs) -> bool"""
        return _gr_ais_swig.ais_unstuff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ais_unstuff_sptr self) -> std::string"""
        return _gr_ais_swig.ais_unstuff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ais_unstuff_sptr self, std::string name)"""
        return _gr_ais_swig.ais_unstuff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ais_unstuff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _gr_ais_swig.ais_unstuff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ais_unstuff_sptr self) -> swig_int_ptr"""
        return _gr_ais_swig.ais_unstuff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ais_unstuff_sptr self) -> swig_int_ptr"""
        return _gr_ais_swig.ais_unstuff_sptr_message_ports_out(self)

ais_unstuff_sptr_swigregister = _gr_ais_swig.ais_unstuff_sptr_swigregister
ais_unstuff_sptr_swigregister(ais_unstuff_sptr)

ais_unstuff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def unstuff():
  """
    unstuff() -> ais_unstuff_sptr

    unstuff a packed stream of bits.

    This uses the preferred technique: subclassing gr_block.

    Return a shared_ptr to a new instance of ais_unstuff.

    To avoid accidental use of raw pointers, ais_unstuff's constructor is private. ais_make_unstuff is the public interface for creating new instances.

    Params: (NONE)
    """
  return _gr_ais_swig.unstuff()
class ais_parse_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ais_parse)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(ais_parse)> self) -> ais_parse_sptr
        __init__(boost::shared_ptr<(ais_parse)> self, ais_parse * p) -> ais_parse_sptr
        """
        this = _gr_ais_swig.new_ais_parse_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ais_parse_sptr self) -> ais_parse *"""
        return _gr_ais_swig.ais_parse_sptr___deref__(self)

    __swig_destroy__ = _gr_ais_swig.delete_ais_parse_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(ais_parse_sptr self) -> unsigned int"""
        return _gr_ais_swig.ais_parse_sptr_history(self)

    def output_multiple(self):
        """output_multiple(ais_parse_sptr self) -> int"""
        return _gr_ais_swig.ais_parse_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ais_parse_sptr self) -> double"""
        return _gr_ais_swig.ais_parse_sptr_relative_rate(self)

    def start(self):
        """start(ais_parse_sptr self) -> bool"""
        return _gr_ais_swig.ais_parse_sptr_start(self)

    def stop(self):
        """stop(ais_parse_sptr self) -> bool"""
        return _gr_ais_swig.ais_parse_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ais_parse_sptr self, unsigned int which_input) -> uint64_t"""
        return _gr_ais_swig.ais_parse_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ais_parse_sptr self, unsigned int which_output) -> uint64_t"""
        return _gr_ais_swig.ais_parse_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ais_parse_sptr self) -> int"""
        return _gr_ais_swig.ais_parse_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ais_parse_sptr self, int m)"""
        return _gr_ais_swig.ais_parse_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ais_parse_sptr self)"""
        return _gr_ais_swig.ais_parse_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ais_parse_sptr self) -> bool"""
        return _gr_ais_swig.ais_parse_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ais_parse_sptr self, int i) -> long"""
        return _gr_ais_swig.ais_parse_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ais_parse_sptr self, long max_output_buffer)
        set_max_output_buffer(ais_parse_sptr self, int port, long max_output_buffer)
        """
        return _gr_ais_swig.ais_parse_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ais_parse_sptr self, int i) -> long"""
        return _gr_ais_swig.ais_parse_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ais_parse_sptr self, long min_output_buffer)
        set_min_output_buffer(ais_parse_sptr self, int port, long min_output_buffer)
        """
        return _gr_ais_swig.ais_parse_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ais_parse_sptr self) -> float"""
        return _gr_ais_swig.ais_parse_sptr_pc_noutput_items(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ais_parse_sptr self) -> float"""
        return _gr_ais_swig.ais_parse_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ais_parse_sptr self) -> float"""
        return _gr_ais_swig.ais_parse_sptr_pc_nproduced(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ais_parse_sptr self) -> float"""
        return _gr_ais_swig.ais_parse_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ais_parse_sptr self, int which) -> float
        pc_input_buffers_full(ais_parse_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_parse_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ais_parse_sptr self, int which) -> float
        pc_input_buffers_full_var(ais_parse_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_parse_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ais_parse_sptr self, int which) -> float
        pc_output_buffers_full(ais_parse_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_parse_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ais_parse_sptr self, int which) -> float
        pc_output_buffers_full_var(ais_parse_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_parse_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ais_parse_sptr self) -> float"""
        return _gr_ais_swig.ais_parse_sptr_pc_work_time(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ais_parse_sptr self) -> float"""
        return _gr_ais_swig.ais_parse_sptr_pc_work_time_var(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ais_parse_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _gr_ais_swig.ais_parse_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ais_parse_sptr self)"""
        return _gr_ais_swig.ais_parse_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ais_parse_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _gr_ais_swig.ais_parse_sptr_processor_affinity(self)

    def detail(self):
        """detail(ais_parse_sptr self) -> gr_block_detail_sptr"""
        return _gr_ais_swig.ais_parse_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(ais_parse_sptr self, gr_block_detail_sptr detail)"""
        return _gr_ais_swig.ais_parse_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(ais_parse_sptr self) -> std::string"""
        return _gr_ais_swig.ais_parse_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ais_parse_sptr self) -> std::string"""
        return _gr_ais_swig.ais_parse_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ais_parse_sptr self) -> gr_io_signature_sptr"""
        return _gr_ais_swig.ais_parse_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ais_parse_sptr self) -> gr_io_signature_sptr"""
        return _gr_ais_swig.ais_parse_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ais_parse_sptr self) -> long"""
        return _gr_ais_swig.ais_parse_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ais_parse_sptr self) -> gr_basic_block_sptr"""
        return _gr_ais_swig.ais_parse_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ais_parse_sptr self, int ninputs, int noutputs) -> bool"""
        return _gr_ais_swig.ais_parse_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ais_parse_sptr self) -> std::string"""
        return _gr_ais_swig.ais_parse_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ais_parse_sptr self, std::string name)"""
        return _gr_ais_swig.ais_parse_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ais_parse_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _gr_ais_swig.ais_parse_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ais_parse_sptr self) -> swig_int_ptr"""
        return _gr_ais_swig.ais_parse_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ais_parse_sptr self) -> swig_int_ptr"""
        return _gr_ais_swig.ais_parse_sptr_message_ports_out(self)

ais_parse_sptr_swigregister = _gr_ais_swig.ais_parse_sptr_swigregister
ais_parse_sptr_swigregister(ais_parse_sptr)

ais_parse_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def parse(*args, **kwargs):
  """
    parse(gr_msg_queue_sptr queue, char designator) -> ais_parse_sptr

    Params: (queue, designator)
    """
  return _gr_ais_swig.parse(*args, **kwargs)
class ais_extended_lms_dfe_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ais_extended_lms_dfe_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(ais_extended_lms_dfe_ff)> self) -> ais_extended_lms_dfe_ff_sptr
        __init__(boost::shared_ptr<(ais_extended_lms_dfe_ff)> self, ais_extended_lms_dfe_ff * p) -> ais_extended_lms_dfe_ff_sptr
        """
        this = _gr_ais_swig.new_ais_extended_lms_dfe_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ais_extended_lms_dfe_ff_sptr self) -> ais_extended_lms_dfe_ff *"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr___deref__(self)

    __swig_destroy__ = _gr_ais_swig.delete_ais_extended_lms_dfe_ff_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(ais_extended_lms_dfe_ff_sptr self) -> unsigned int"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(ais_extended_lms_dfe_ff_sptr self) -> int"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ais_extended_lms_dfe_ff_sptr self) -> double"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_relative_rate(self)

    def start(self):
        """start(ais_extended_lms_dfe_ff_sptr self) -> bool"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_start(self)

    def stop(self):
        """stop(ais_extended_lms_dfe_ff_sptr self) -> bool"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ais_extended_lms_dfe_ff_sptr self, unsigned int which_input) -> uint64_t"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ais_extended_lms_dfe_ff_sptr self, unsigned int which_output) -> uint64_t"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ais_extended_lms_dfe_ff_sptr self) -> int"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ais_extended_lms_dfe_ff_sptr self, int m)"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ais_extended_lms_dfe_ff_sptr self)"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ais_extended_lms_dfe_ff_sptr self) -> bool"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ais_extended_lms_dfe_ff_sptr self, int i) -> long"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ais_extended_lms_dfe_ff_sptr self, long max_output_buffer)
        set_max_output_buffer(ais_extended_lms_dfe_ff_sptr self, int port, long max_output_buffer)
        """
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ais_extended_lms_dfe_ff_sptr self, int i) -> long"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ais_extended_lms_dfe_ff_sptr self, long min_output_buffer)
        set_min_output_buffer(ais_extended_lms_dfe_ff_sptr self, int port, long min_output_buffer)
        """
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ais_extended_lms_dfe_ff_sptr self) -> float"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_pc_noutput_items(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ais_extended_lms_dfe_ff_sptr self) -> float"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ais_extended_lms_dfe_ff_sptr self) -> float"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_pc_nproduced(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ais_extended_lms_dfe_ff_sptr self) -> float"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ais_extended_lms_dfe_ff_sptr self, int which) -> float
        pc_input_buffers_full(ais_extended_lms_dfe_ff_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ais_extended_lms_dfe_ff_sptr self, int which) -> float
        pc_input_buffers_full_var(ais_extended_lms_dfe_ff_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ais_extended_lms_dfe_ff_sptr self, int which) -> float
        pc_output_buffers_full(ais_extended_lms_dfe_ff_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ais_extended_lms_dfe_ff_sptr self, int which) -> float
        pc_output_buffers_full_var(ais_extended_lms_dfe_ff_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ais_extended_lms_dfe_ff_sptr self) -> float"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_pc_work_time(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ais_extended_lms_dfe_ff_sptr self) -> float"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_pc_work_time_var(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ais_extended_lms_dfe_ff_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ais_extended_lms_dfe_ff_sptr self)"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ais_extended_lms_dfe_ff_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_processor_affinity(self)

    def detail(self):
        """detail(ais_extended_lms_dfe_ff_sptr self) -> gr_block_detail_sptr"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(ais_extended_lms_dfe_ff_sptr self, gr_block_detail_sptr detail)"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(ais_extended_lms_dfe_ff_sptr self) -> std::string"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ais_extended_lms_dfe_ff_sptr self) -> std::string"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ais_extended_lms_dfe_ff_sptr self) -> gr_io_signature_sptr"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ais_extended_lms_dfe_ff_sptr self) -> gr_io_signature_sptr"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ais_extended_lms_dfe_ff_sptr self) -> long"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ais_extended_lms_dfe_ff_sptr self) -> gr_basic_block_sptr"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ais_extended_lms_dfe_ff_sptr self, int ninputs, int noutputs) -> bool"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ais_extended_lms_dfe_ff_sptr self) -> std::string"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ais_extended_lms_dfe_ff_sptr self, std::string name)"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ais_extended_lms_dfe_ff_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ais_extended_lms_dfe_ff_sptr self) -> swig_int_ptr"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ais_extended_lms_dfe_ff_sptr self) -> swig_int_ptr"""
        return _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_message_ports_out(self)

ais_extended_lms_dfe_ff_sptr_swigregister = _gr_ais_swig.ais_extended_lms_dfe_ff_sptr_swigregister
ais_extended_lms_dfe_ff_sptr_swigregister(ais_extended_lms_dfe_ff_sptr)

ais_extended_lms_dfe_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def extended_lms_dfe_ff(*args, **kwargs):
  """
    extended_lms_dfe_ff(float lambda_ff, float lambda_fb, unsigned int num_fftaps, unsigned int num_fbtaps) -> ais_extended_lms_dfe_ff_sptr

    Least-Mean-Square Decision Feedback Equalizer (float in/out) with reset input and preamble training.

    Params: (lambda_ff, lambda_fb, num_fftaps, num_fbtaps)
    """
  return _gr_ais_swig.extended_lms_dfe_ff(*args, **kwargs)
class ais_freqest_sptr(object):
    """Proxy of C++ boost::shared_ptr<(ais_freqest)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(ais_freqest)> self) -> ais_freqest_sptr
        __init__(boost::shared_ptr<(ais_freqest)> self, ais_freqest * p) -> ais_freqest_sptr
        """
        this = _gr_ais_swig.new_ais_freqest_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ais_freqest_sptr self) -> ais_freqest *"""
        return _gr_ais_swig.ais_freqest_sptr___deref__(self)

    __swig_destroy__ = _gr_ais_swig.delete_ais_freqest_sptr
    __del__ = lambda self : None;
    def history(self):
        """history(ais_freqest_sptr self) -> unsigned int"""
        return _gr_ais_swig.ais_freqest_sptr_history(self)

    def output_multiple(self):
        """output_multiple(ais_freqest_sptr self) -> int"""
        return _gr_ais_swig.ais_freqest_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ais_freqest_sptr self) -> double"""
        return _gr_ais_swig.ais_freqest_sptr_relative_rate(self)

    def start(self):
        """start(ais_freqest_sptr self) -> bool"""
        return _gr_ais_swig.ais_freqest_sptr_start(self)

    def stop(self):
        """stop(ais_freqest_sptr self) -> bool"""
        return _gr_ais_swig.ais_freqest_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ais_freqest_sptr self, unsigned int which_input) -> uint64_t"""
        return _gr_ais_swig.ais_freqest_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ais_freqest_sptr self, unsigned int which_output) -> uint64_t"""
        return _gr_ais_swig.ais_freqest_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ais_freqest_sptr self) -> int"""
        return _gr_ais_swig.ais_freqest_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ais_freqest_sptr self, int m)"""
        return _gr_ais_swig.ais_freqest_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ais_freqest_sptr self)"""
        return _gr_ais_swig.ais_freqest_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ais_freqest_sptr self) -> bool"""
        return _gr_ais_swig.ais_freqest_sptr_is_set_max_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ais_freqest_sptr self, int i) -> long"""
        return _gr_ais_swig.ais_freqest_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ais_freqest_sptr self, long max_output_buffer)
        set_max_output_buffer(ais_freqest_sptr self, int port, long max_output_buffer)
        """
        return _gr_ais_swig.ais_freqest_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ais_freqest_sptr self, int i) -> long"""
        return _gr_ais_swig.ais_freqest_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ais_freqest_sptr self, long min_output_buffer)
        set_min_output_buffer(ais_freqest_sptr self, int port, long min_output_buffer)
        """
        return _gr_ais_swig.ais_freqest_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ais_freqest_sptr self) -> float"""
        return _gr_ais_swig.ais_freqest_sptr_pc_noutput_items(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ais_freqest_sptr self) -> float"""
        return _gr_ais_swig.ais_freqest_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ais_freqest_sptr self) -> float"""
        return _gr_ais_swig.ais_freqest_sptr_pc_nproduced(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ais_freqest_sptr self) -> float"""
        return _gr_ais_swig.ais_freqest_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ais_freqest_sptr self, int which) -> float
        pc_input_buffers_full(ais_freqest_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_freqest_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ais_freqest_sptr self, int which) -> float
        pc_input_buffers_full_var(ais_freqest_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_freqest_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ais_freqest_sptr self, int which) -> float
        pc_output_buffers_full(ais_freqest_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_freqest_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ais_freqest_sptr self, int which) -> float
        pc_output_buffers_full_var(ais_freqest_sptr self) -> std::vector< float,std::allocator< float > >
        """
        return _gr_ais_swig.ais_freqest_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ais_freqest_sptr self) -> float"""
        return _gr_ais_swig.ais_freqest_sptr_pc_work_time(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ais_freqest_sptr self) -> float"""
        return _gr_ais_swig.ais_freqest_sptr_pc_work_time_var(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ais_freqest_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _gr_ais_swig.ais_freqest_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ais_freqest_sptr self)"""
        return _gr_ais_swig.ais_freqest_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ais_freqest_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _gr_ais_swig.ais_freqest_sptr_processor_affinity(self)

    def detail(self):
        """detail(ais_freqest_sptr self) -> gr_block_detail_sptr"""
        return _gr_ais_swig.ais_freqest_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(ais_freqest_sptr self, gr_block_detail_sptr detail)"""
        return _gr_ais_swig.ais_freqest_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(ais_freqest_sptr self) -> std::string"""
        return _gr_ais_swig.ais_freqest_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ais_freqest_sptr self) -> std::string"""
        return _gr_ais_swig.ais_freqest_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ais_freqest_sptr self) -> gr_io_signature_sptr"""
        return _gr_ais_swig.ais_freqest_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ais_freqest_sptr self) -> gr_io_signature_sptr"""
        return _gr_ais_swig.ais_freqest_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ais_freqest_sptr self) -> long"""
        return _gr_ais_swig.ais_freqest_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ais_freqest_sptr self) -> gr_basic_block_sptr"""
        return _gr_ais_swig.ais_freqest_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ais_freqest_sptr self, int ninputs, int noutputs) -> bool"""
        return _gr_ais_swig.ais_freqest_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ais_freqest_sptr self) -> std::string"""
        return _gr_ais_swig.ais_freqest_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ais_freqest_sptr self, std::string name)"""
        return _gr_ais_swig.ais_freqest_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ais_freqest_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _gr_ais_swig.ais_freqest_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ais_freqest_sptr self) -> swig_int_ptr"""
        return _gr_ais_swig.ais_freqest_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ais_freqest_sptr self) -> swig_int_ptr"""
        return _gr_ais_swig.ais_freqest_sptr_message_ports_out(self)

ais_freqest_sptr_swigregister = _gr_ais_swig.ais_freqest_sptr_swigregister
ais_freqest_sptr_swigregister(ais_freqest_sptr)

ais_freqest_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def freqest(*args, **kwargs):
  """
    freqest(int sample_rate, int data_rate, int fftlen) -> ais_freqest_sptr

    freqest a packed stream of bits.

    This uses the preferred technique: subclassing gr_sync_block.

    Return a shared_ptr to a new instance of ais_freqest.

    To avoid accidental use of raw pointers, ais_freqest's constructor is private. ais_make_freqest is the public interface for creating new instances.

    Params: (sample_rate, data_rate, fftlen)
    """
  return _gr_ais_swig.freqest(*args, **kwargs)


